jQuery(function(e){const i=e(".signup"),t=e(".signup-overlay"),n=e("#signup-window");e(".thank-overlay-signup");const o=e(".thank-wrapper-signup"),a=e(".form-window__cross"),s=(i.on("click",function(){t.fadeIn(),n.fadeIn(),u()}),e(".contact__submit")),r=e(".form-window"),l=e(".form-overlay");function u(){e(".iti__country-list").each(function(){var t=e(this).parents(".iti--allow-dropdown").innerWidth();e(this).innerWidth(t)})}e(function(){e(document).on("click",function(t){e(t.target).closest(i).length||e(t.target).closest(r).length||e(t.target).closest(o).length||e(t.target).closest(s).length||(l.fadeOut(),r.fadeOut(),t.stopPropagation())})}),e(function(){e(document).on("keydown",function(t){(27===t.keyCode||"ESC"===t.key)&&(l.fadeOut(),r.fadeOut(),t.stopPropagation())})}),e(function(){a.on("click",function(t){l.fadeOut(),r.fadeOut(),t.stopPropagation()})}),e(window).on("load",u);var d=document.querySelector(".form-inner__signup-name-input"),c=document.querySelector(".form-inner__error-name"),h=document.querySelector(".form-inner__signup-last-input"),p=document.querySelector(".form-inner__error-last"),m=document.querySelector(".form-inner__signup-tel-input"),g=document.querySelector(".form-inner__signup-error-tel"),y=document.querySelector(".form-inner__mail-input"),f=document.querySelector(".form-inner__error-mail"),v=document.querySelector("#signup-form-send"),_=!1,C=!1,L=!1,b=!1;function w(){v.classList.add("form-inner__submit--inactive"),1==_&&1==C&&1==L&&1==b&&v.classList.remove("form-inner__submit--inactive")}function I(){0===d.value.trim().length?(L=!1,c.textContent="This field is required",c.classList.remove("hidden"),d.classList.add("error")):(L=!1,d.classList.remove("error"),c.innerHTML="",c.classList.add("hidden"),w(),0==/^[a-zA-Z\s]*$/.test(d.value)?(L=!1,d.classList.add("error"),c.textContent="Name must contain only Latin characters",c.classList.remove("hidden")):(L=!0,d.classList.remove("error"))),w()}d.addEventListener("keyup",I),d.addEventListener("focus",I);function k(){0===h.value.trim().length?(b=!1,p.textContent="This field is required",p.classList.remove("hidden"),h.classList.add("error")):(b=!1,h.classList.remove("error"),p.innerHTML="",p.classList.add("hidden"),w(),0==/^[a-zA-Z\s]*$/.test(h.value)?(b=!1,h.classList.add("error"),p.textContent="Last name must contain only Latin characters",p.classList.remove("hidden")):(b=!0,h.classList.remove("error"))),w()}h.addEventListener("keyup",k),h.addEventListener("focus",k);function S(){C=!1,m.classList.remove("error"),g.innerHTML="",g.classList.add("hidden"),w()}var E=["Phone number is invalid","Invalid country code","Phone number is too short","Phone number is too long","Phone number is invalid"],D=window.intlTelInput(m,{separateDialCode:!0,initialCountry:"auto",geoIpLookup:function(e){fetch("https://ipinfo.io/json?token=0b439743c9ba83",{headers:{Accept:"application/json"}}).then(t=>t.json()).catch(()=>({country:"us"})).then(t=>e(t.country))},utilsScript:"https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.12/js/utils.min.js"});function T(){S();var t=D.getValidationError();0==m.value.length&&(C=!1,m.classList.add("error"),g.textContent="This field is required",g.classList.remove("hidden")),m.value.trim()&&(D.isValidNumber()?C=!0:(-99==t?(C=!1,m.classList.add("error"),g.textContent="Phone number is invalid"):(C=!1,m.classList.add("error"),t=D.getValidationError(),g.innerHTML=E[t]),g.classList.remove("hidden"))),w()}m.addEventListener("keyup",T),m.addEventListener("focus",T);var A=document.querySelectorAll(".iti__country");for(let t=0;t<A.length;t++)A[t].addEventListener("click",function(){S()});function N(){0==y.value.length?(_=!1,f.textContent="This field is required",f.classList.remove("hidden"),y.classList.add("error")):(_=!1,y.classList.remove("error"),f.innerHTML="",f.classList.add("hidden"),w(),0==/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]/.test(y.value)?(_=!1,y.classList.add("error"),f.textContent="Email should contain @",f.classList.remove("hidden")):/\s/.test(y.value)?(_=!1,y.classList.add("error"),f.textContent="Email should not contain spaces",f.classList.remove("hidden")):0==/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(y.value)?(_=!1,y.classList.add("error"),f.textContent="Email must contain domain For example: .com",f.classList.remove("hidden")):(_=!0,y.classList.remove("error"))),w()}y.addEventListener("keyup",N),y.addEventListener("focus",N)}),jQuery(function(n){if(window.innerWidth<900){n(".header__hamburger").on("click",function(){n(".header__nav").toggle(),n(".header__hamburger").hide(),n(".header__cross").show(),n(window).off("scroll",o)}),n(".header__cross").on("click",function(){n(".header__nav").toggle(),n(".header__hamburger").show(),n(".header__cross").hide(),n(window).on("scroll",o)});let t,e=0,i=n("header").outerHeight();function o(){t=!0}n(window).on("scroll",o),setInterval(function(){t&&(!function(){var t=n(this).scrollTop();Math.abs(e-t)<=5||(t>e&&t>i?n("header").removeClass("nav-down").addClass("nav-up"):t+n(window).height()<n(document).height()&&n("header").removeClass("nav-up").addClass("nav-down"),e=t)}(),t=!1)},250)}}),function(t){"object"==typeof module&&module.exports?module.exports=t():window.intlTelInput=t()}(function(a){"use strict";for(var s=[["Afghanistan (‫افغانستان‬‎)","af","93"],["Albania (Shqipëri)","al","355"],["Algeria (‫الجزائر‬‎)","dz","213"],["American Samoa","as","1",5,["684"]],["Andorra","ad","376"],["Angola","ao","244"],["Anguilla","ai","1",6,["264"]],["Antigua and Barbuda","ag","1",7,["268"]],["Argentina","ar","54"],["Armenia (Հայաստան)","am","374"],["Aruba","aw","297"],["Ascension Island","ac","247"],["Australia","au","61",0],["Austria (Österreich)","at","43"],["Azerbaijan (Azərbaycan)","az","994"],["Bahamas","bs","1",8,["242"]],["Bahrain (‫البحرين‬‎)","bh","973"],["Bangladesh (বাংলাদেশ)","bd","880"],["Barbados","bb","1",9,["246"]],["Belarus (Беларусь)","by","375"],["Belgium (België)","be","32"],["Belize","bz","501"],["Benin (Bénin)","bj","229"],["Bermuda","bm","1",10,["441"]],["Bhutan (འབྲུག)","bt","975"],["Bolivia","bo","591"],["Bosnia and Herzegovina (Босна и Херцеговина)","ba","387"],["Botswana","bw","267"],["Brazil (Brasil)","br","55"],["British Indian Ocean Territory","io","246"],["British Virgin Islands","vg","1",11,["284"]],["Brunei","bn","673"],["Bulgaria (България)","bg","359"],["Burkina Faso","bf","226"],["Burundi (Uburundi)","bi","257"],["Cambodia (កម្ពុជា)","kh","855"],["Cameroon (Cameroun)","cm","237"],["Canada","ca","1",1,["204","226","236","249","250","289","306","343","365","387","403","416","418","431","437","438","450","506","514","519","548","579","581","587","604","613","639","647","672","705","709","742","778","780","782","807","819","825","867","873","902","905"]],["Cape Verde (Kabu Verdi)","cv","238"],["Caribbean Netherlands","bq","599",1,["3","4","7"]],["Cayman Islands","ky","1",12,["345"]],["Central African Republic (République centrafricaine)","cf","236"],["Chad (Tchad)","td","235"],["Chile","cl","56"],["China (中国)","cn","86"],["Christmas Island","cx","61",2,["89164"]],["Cocos (Keeling) Islands","cc","61",1,["89162"]],["Colombia","co","57"],["Comoros (‫جزر القمر‬‎)","km","269"],["Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)","cd","243"],["Congo (Republic) (Congo-Brazzaville)","cg","242"],["Cook Islands","ck","682"],["Costa Rica","cr","506"],["Côte d’Ivoire","ci","225"],["Croatia (Hrvatska)","hr","385"],["Cuba","cu","53"],["Curaçao","cw","599",0],["Cyprus (Κύπρος)","cy","357"],["Czech Republic (Česká republika)","cz","420"],["Denmark (Danmark)","dk","45"],["Djibouti","dj","253"],["Dominica","dm","1",13,["767"]],["Dominican Republic (República Dominicana)","do","1",2,["809","829","849"]],["Ecuador","ec","593"],["Egypt (‫مصر‬‎)","eg","20"],["El Salvador","sv","503"],["Equatorial Guinea (Guinea Ecuatorial)","gq","240"],["Eritrea","er","291"],["Estonia (Eesti)","ee","372"],["Eswatini","sz","268"],["Ethiopia","et","251"],["Falkland Islands (Islas Malvinas)","fk","500"],["Faroe Islands (Føroyar)","fo","298"],["Fiji","fj","679"],["Finland (Suomi)","fi","358",0],["France","fr","33"],["French Guiana (Guyane française)","gf","594"],["French Polynesia (Polynésie française)","pf","689"],["Gabon","ga","241"],["Gambia","gm","220"],["Georgia (საქართველო)","ge","995"],["Germany (Deutschland)","de","49"],["Ghana (Gaana)","gh","233"],["Gibraltar","gi","350"],["Greece (Ελλάδα)","gr","30"],["Greenland (Kalaallit Nunaat)","gl","299"],["Grenada","gd","1",14,["473"]],["Guadeloupe","gp","590",0],["Guam","gu","1",15,["671"]],["Guatemala","gt","502"],["Guernsey","gg","44",1,["1481","7781","7839","7911"]],["Guinea (Guinée)","gn","224"],["Guinea-Bissau (Guiné Bissau)","gw","245"],["Guyana","gy","592"],["Haiti","ht","509"],["Honduras","hn","504"],["Hong Kong (香港)","hk","852"],["Hungary (Magyarország)","hu","36"],["Iceland (Ísland)","is","354"],["India (भारत)","in","91"],["Indonesia","id","62"],["Iran (‫ایران‬‎)","ir","98"],["Iraq (‫العراق‬‎)","iq","964"],["Ireland","ie","353"],["Isle of Man","im","44",2,["1624","74576","7524","7924","7624"]],["Israel (‫ישראל‬‎)","il","972"],["Italy (Italia)","it","39",0],["Jamaica","jm","1",4,["876","658"]],["Japan (日本)","jp","81"],["Jersey","je","44",3,["1534","7509","7700","7797","7829","7937"]],["Jordan (‫الأردن‬‎)","jo","962"],["Kazakhstan (Казахстан)","kz","7",1,["33","7"]],["Kenya","ke","254"],["Kiribati","ki","686"],["Kosovo","xk","383"],["Kuwait (‫الكويت‬‎)","kw","965"],["Kyrgyzstan (Кыргызстан)","kg","996"],["Laos (ລາວ)","la","856"],["Latvia (Latvija)","lv","371"],["Lebanon (‫لبنان‬‎)","lb","961"],["Lesotho","ls","266"],["Liberia","lr","231"],["Libya (‫ليبيا‬‎)","ly","218"],["Liechtenstein","li","423"],["Lithuania (Lietuva)","lt","370"],["Luxembourg","lu","352"],["Macau (澳門)","mo","853"],["Macedonia (FYROM) (Македонија)","mk","389"],["Madagascar (Madagasikara)","mg","261"],["Malawi","mw","265"],["Malaysia","my","60"],["Maldives","mv","960"],["Mali","ml","223"],["Malta","mt","356"],["Marshall Islands","mh","692"],["Martinique","mq","596"],["Mauritania (‫موريتانيا‬‎)","mr","222"],["Mauritius (Moris)","mu","230"],["Mayotte","yt","262",1,["269","639"]],["Mexico (México)","mx","52"],["Micronesia","fm","691"],["Moldova (Republica Moldova)","md","373"],["Monaco","mc","377"],["Mongolia (Монгол)","mn","976"],["Montenegro (Crna Gora)","me","382"],["Montserrat","ms","1",16,["664"]],["Morocco (‫المغرب‬‎)","ma","212",0],["Mozambique (Moçambique)","mz","258"],["Myanmar (Burma) (မြန်မာ)","mm","95"],["Namibia (Namibië)","na","264"],["Nauru","nr","674"],["Nepal (नेपाल)","np","977"],["Netherlands (Nederland)","nl","31"],["New Caledonia (Nouvelle-Calédonie)","nc","687"],["New Zealand","nz","64"],["Nicaragua","ni","505"],["Niger (Nijar)","ne","227"],["Nigeria","ng","234"],["Niue","nu","683"],["Norfolk Island","nf","672"],["North Korea (조선 민주주의 인민 공화국)","kp","850"],["Northern Mariana Islands","mp","1",17,["670"]],["Norway (Norge)","no","47",0],["Oman (‫عُمان‬‎)","om","968"],["Pakistan (‫پاکستان‬‎)","pk","92"],["Palau","pw","680"],["Palestine (‫فلسطين‬‎)","ps","970"],["Panama (Panamá)","pa","507"],["Papua New Guinea","pg","675"],["Paraguay","py","595"],["Peru (Perú)","pe","51"],["Philippines","ph","63"],["Poland (Polska)","pl","48"],["Portugal","pt","351"],["Puerto Rico","pr","1",3,["787","939"]],["Qatar (‫قطر‬‎)","qa","974"],["Réunion (La Réunion)","re","262",0],["Romania (România)","ro","40"],["Russia (Россия)","ru","7",0],["Rwanda","rw","250"],["Saint Barthélemy","bl","590",1],["Saint Helena","sh","290"],["Saint Kitts and Nevis","kn","1",18,["869"]],["Saint Lucia","lc","1",19,["758"]],["Saint Martin (Saint-Martin (partie française))","mf","590",2],["Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)","pm","508"],["Saint Vincent and the Grenadines","vc","1",20,["784"]],["Samoa","ws","685"],["San Marino","sm","378"],["São Tomé and Príncipe (São Tomé e Príncipe)","st","239"],["Saudi Arabia (‫المملكة العربية السعودية‬‎)","sa","966"],["Senegal (Sénégal)","sn","221"],["Serbia (Србија)","rs","381"],["Seychelles","sc","248"],["Sierra Leone","sl","232"],["Singapore","sg","65"],["Sint Maarten","sx","1",21,["721"]],["Slovakia (Slovensko)","sk","421"],["Slovenia (Slovenija)","si","386"],["Solomon Islands","sb","677"],["Somalia (Soomaaliya)","so","252"],["South Africa","za","27"],["South Korea (대한민국)","kr","82"],["South Sudan (‫جنوب السودان‬‎)","ss","211"],["Spain (España)","es","34"],["Sri Lanka (ශ්‍රී ලංකාව)","lk","94"],["Sudan (‫السودان‬‎)","sd","249"],["Suriname","sr","597"],["Svalbard and Jan Mayen","sj","47",1,["79"]],["Sweden (Sverige)","se","46"],["Switzerland (Schweiz)","ch","41"],["Syria (‫سوريا‬‎)","sy","963"],["Taiwan (台灣)","tw","886"],["Tajikistan","tj","992"],["Tanzania","tz","255"],["Thailand (ไทย)","th","66"],["Timor-Leste","tl","670"],["Togo","tg","228"],["Tokelau","tk","690"],["Tonga","to","676"],["Trinidad and Tobago","tt","1",22,["868"]],["Tunisia (‫تونس‬‎)","tn","216"],["Turkey (Türkiye)","tr","90"],["Turkmenistan","tm","993"],["Turks and Caicos Islands","tc","1",23,["649"]],["Tuvalu","tv","688"],["U.S. Virgin Islands","vi","1",24,["340"]],["Uganda","ug","256"],["Ukraine (Україна)","ua","380"],["United Arab Emirates (‫الإمارات العربية المتحدة‬‎)","ae","971"],["United Kingdom","gb","44",0],["United States","us","1",0],["Uruguay","uy","598"],["Uzbekistan (Oʻzbekiston)","uz","998"],["Vanuatu","vu","678"],["Vatican City (Città del Vaticano)","va","39",1,["06698"]],["Venezuela","ve","58"],["Vietnam (Việt Nam)","vn","84"],["Wallis and Futuna (Wallis-et-Futuna)","wf","681"],["Western Sahara (‫الصحراء الغربية‬‎)","eh","212",1,["5288","5289"]],["Yemen (‫اليمن‬‎)","ye","967"],["Zambia","zm","260"],["Zimbabwe","zw","263"],["Åland Islands","ax","358",1,["18"]]],t=0;t<s.length;t++){var e=s[t];s[t]={name:e[0],iso2:e[1],dialCode:e[2],priority:e[3]||0,areaCodes:e[4]||null}}function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,e){for(var i=Object.keys(t),n=0;n<i.length;n++)e(i[n],t[i[n]])}function l(e){r(window.intlTelInputGlobals.instances,function(t){window.intlTelInputGlobals.instances[t][e]()})}function o(t,e,i){var n=document.createElement("script");n.onload=function(){l("handleUtils"),e&&e()},n.onerror=function(){l("rejectUtilsScriptPromise"),i&&i()},n.className="iti-load-utils",n.async=!0,n.src=t,document.body.appendChild(n)}var i={getInstance:function(t){t=t.getAttribute("data-intl-tel-input-id");return window.intlTelInputGlobals.instances[t]},instances:{},documentReady:function(){return"complete"===document.readyState}},u=("object"==typeof window&&(window.intlTelInputGlobals=i),0),d={allowDropdown:!0,autoHideDialCode:!0,autoPlaceholder:"polite",customContainer:"",customPlaceholder:null,dropdownContainer:null,excludeCountries:[],formatOnDisplay:!0,geoIpLookup:null,hiddenInput:"",initialCountry:"",localizedCountries:null,nationalMode:!0,onlyCountries:[],placeholderNumberType:"MOBILE",preferredCountries:["us","gb"],separateDialCode:!1,utilsScript:""},c=["800","822","833","844","855","866","877","880","881","882","883","884","885","886","887","888","889"],h=function(){function o(t,e){var i=this;if(!(this instanceof o))throw new TypeError("Cannot call a class as a function");this.id=u++,this.telInput=t,this.activeItem=null,this.highlightedItem=null;var n=e||{};this.options={},r(d,function(t,e){i.options[t]=n.hasOwnProperty(t)?n[t]:e}),this.hadInitialPlaceholder=Boolean(t.getAttribute("placeholder"))}var t,e,i;return t=o,(e=[{key:"_init",value:function(){var t,e,i=this;this.options.nationalMode&&(this.options.autoHideDialCode=!1),this.options.separateDialCode&&(this.options.autoHideDialCode=this.options.nationalMode=!1),"undefined"!=typeof Promise?(t=new Promise(function(t,e){i.resolveAutoCountryPromise=t,i.rejectAutoCountryPromise=e}),e=new Promise(function(t,e){i.resolveUtilsScriptPromise=t,i.rejectUtilsScriptPromise=e}),this.promise=Promise.all([t,e])):(this.resolveAutoCountryPromise=this.rejectAutoCountryPromise=function(){},this.resolveUtilsScriptPromise=this.rejectUtilsScriptPromise=function(){}),this.selectedCountryData={},this._processCountryData(),this._generateMarkup(),this._setInitialState(),this._initListeners(),this._initRequests()}},{key:"_processCountryData",value:function(){this._processAllCountries(),this._processCountryCodes(),this._processPreferredCountries(),this.options.localizedCountries&&this._translateCountriesByLocale(),(this.options.onlyCountries.length||this.options.localizedCountries)&&this.countries.sort(this._countryNameSort)}},{key:"_addCountryCode",value:function(t,e,i){e.length>this.countryCodeMaxLen&&(this.countryCodeMaxLen=e.length),this.countryCodes.hasOwnProperty(e)||(this.countryCodes[e]=[]);for(var n=0;n<this.countryCodes[e].length;n++)if(this.countryCodes[e][n]===t)return;i=i!==a?i:this.countryCodes[e].length;this.countryCodes[e][i]=t}},{key:"_processAllCountries",value:function(){var e,i;this.options.onlyCountries.length?(e=this.options.onlyCountries.map(function(t){return t.toLowerCase()}),this.countries=s.filter(function(t){return-1<e.indexOf(t.iso2)})):this.options.excludeCountries.length?(i=this.options.excludeCountries.map(function(t){return t.toLowerCase()}),this.countries=s.filter(function(t){return-1===i.indexOf(t.iso2)})):this.countries=s}},{key:"_translateCountriesByLocale",value:function(){for(var t=0;t<this.countries.length;t++){var e=this.countries[t].iso2.toLowerCase();this.options.localizedCountries.hasOwnProperty(e)&&(this.countries[t].name=this.options.localizedCountries[e])}}},{key:"_countryNameSort",value:function(t,e){return t.name.localeCompare(e.name)}},{key:"_processCountryCodes",value:function(){this.countryCodeMaxLen=0,this.dialCodes={},this.countryCodes={};for(var t=0;t<this.countries.length;t++){var e=this.countries[t];this.dialCodes[e.dialCode]||(this.dialCodes[e.dialCode]=!0),this._addCountryCode(e.iso2,e.dialCode,e.priority)}for(var i=0;i<this.countries.length;i++){var n=this.countries[i];if(n.areaCodes)for(var o=this.countryCodes[n.dialCode][0],a=0;a<n.areaCodes.length;a++){for(var s=n.areaCodes[a],r=1;r<s.length;r++){var l=n.dialCode+s.substr(0,r);this._addCountryCode(o,l),this._addCountryCode(n.iso2,l)}this._addCountryCode(n.iso2,n.dialCode+s)}}}},{key:"_processPreferredCountries",value:function(){this.preferredCountries=[];for(var t=0;t<this.options.preferredCountries.length;t++){var e=this.options.preferredCountries[t].toLowerCase(),e=this._getCountryData(e,!1,!0);e&&this.preferredCountries.push(e)}}},{key:"_createEl",value:function(t,e,i){var n=document.createElement(t);return e&&r(e,function(t,e){n.setAttribute(t,e)}),i&&i.appendChild(n),n}},{key:"_generateMarkup",value:function(){this.telInput.hasAttribute("autocomplete")||this.telInput.form&&this.telInput.form.hasAttribute("autocomplete")||this.telInput.setAttribute("autocomplete","off");var t,e,i,n="iti",n=(this.options.allowDropdown&&(n+=" iti--allow-dropdown"),this.options.separateDialCode&&(n+=" iti--separate-dial-code"),this.options.customContainer&&(n=n+" "+this.options.customContainer),this._createEl("div",{class:n}));this.telInput.parentNode.insertBefore(n,this.telInput),this.flagsContainer=this._createEl("div",{class:"iti__flag-container"},n),n.appendChild(this.telInput),this.selectedFlag=this._createEl("div",{class:"iti__selected-flag",role:"combobox","aria-controls":"iti-".concat(this.id,"__country-listbox"),"aria-owns":"iti-".concat(this.id,"__country-listbox"),"aria-expanded":"false"},this.flagsContainer),this.selectedFlagInner=this._createEl("div",{class:"iti__flag"},this.selectedFlag),this.options.separateDialCode&&(this.selectedDialCode=this._createEl("div",{class:"iti__selected-dial-code"},this.selectedFlag)),this.options.allowDropdown&&(this.selectedFlag.setAttribute("tabindex","0"),this.dropdownArrow=this._createEl("div",{class:"iti__arrow"},this.selectedFlag),this.countryList=this._createEl("ul",{class:"iti__country-list iti__hide",id:"iti-".concat(this.id,"__country-listbox"),role:"listbox","aria-label":"List of countries"}),this.preferredCountries.length&&(this._appendListItems(this.preferredCountries,"iti__preferred",!0),this._createEl("li",{class:"iti__divider",role:"separator","aria-disabled":"true"},this.countryList)),this._appendListItems(this.countries,"iti__standard"),(this.options.dropdownContainer?(this.dropdown=this._createEl("div",{class:"iti iti--container"}),this.dropdown):this.flagsContainer).appendChild(this.countryList)),this.options.hiddenInput&&(t=this.options.hiddenInput,(e=this.telInput.getAttribute("name"))&&-1!==(i=e.lastIndexOf("["))&&(t="".concat(e.substr(0,i),"[").concat(t,"]")),this.hiddenInput=this._createEl("input",{type:"hidden",name:t}),n.appendChild(this.hiddenInput))}},{key:"_appendListItems",value:function(t,e,i){for(var n="",o=0;o<t.length;o++)var a=t[o],s=i?"-preferred":"",n=(n=(n=(n+="<li class='iti__country ".concat(e,"' tabIndex='-1' id='iti-").concat(this.id,"__item-").concat(a.iso2).concat(s,"' role='option' data-dial-code='").concat(a.dialCode,"' data-country-code='").concat(a.iso2,"' aria-selected='false'>"))+"<div class='iti__flag-box'><div class='iti__flag iti__".concat(a.iso2,"'></div></div>"))+"<span class='iti__country-name'>".concat(a.name,"</span>"))+"<span class='iti__dial-code'>+".concat(a.dialCode,"</span>")+"</li>";this.countryList.insertAdjacentHTML("beforeend",n)}},{key:"_setInitialState",value:function(){var t=this.telInput.getAttribute("value"),e=this.telInput.value,t=t&&"+"===t.charAt(0)&&(!e||"+"!==e.charAt(0))?t:e,e=this._getDialCode(t),i=this._isRegionlessNanp(t),n=this.options,o=n.initialCountry,a=n.nationalMode,s=n.autoHideDialCode,n=n.separateDialCode;e&&!i?this._updateFlagFromNumber(t):"auto"!==o&&(o?this._setFlag(o.toLowerCase()):e&&i?this._setFlag("us"):(this.defaultCountry=(this.preferredCountries.length?this.preferredCountries:this.countries)[0].iso2,t||this._setFlag(this.defaultCountry)),t||a||s||n||(this.telInput.value="+".concat(this.selectedCountryData.dialCode))),t&&this._updateValFromNumber(t)}},{key:"_initListeners",value:function(){this._initKeyListeners(),this.options.autoHideDialCode&&this._initBlurListeners(),this.options.allowDropdown&&this._initDropdownListeners(),this.hiddenInput&&this._initHiddenInputListener()}},{key:"_initHiddenInputListener",value:function(){var t=this;this._handleHiddenInputSubmit=function(){t.hiddenInput.value=t.getNumber()},this.telInput.form&&this.telInput.form.addEventListener("submit",this._handleHiddenInputSubmit)}},{key:"_getClosestLabel",value:function(){for(var t=this.telInput;t&&"LABEL"!==t.tagName;)t=t.parentNode;return t}},{key:"_initDropdownListeners",value:function(){var e=this,t=(this._handleLabelClick=function(t){e.countryList.classList.contains("iti__hide")?e.telInput.focus():t.preventDefault()},this._getClosestLabel());t&&t.addEventListener("click",this._handleLabelClick),this._handleClickSelectedFlag=function(){!e.countryList.classList.contains("iti__hide")||e.telInput.disabled||e.telInput.readOnly||e._showDropdown()},this.selectedFlag.addEventListener("click",this._handleClickSelectedFlag),this._handleFlagsContainerKeydown=function(t){e.countryList.classList.contains("iti__hide")&&-1!==["ArrowUp","Up","ArrowDown","Down"," ","Enter"].indexOf(t.key)&&(t.preventDefault(),t.stopPropagation(),e._showDropdown()),"Tab"===t.key&&e._closeDropdown()},this.flagsContainer.addEventListener("keydown",this._handleFlagsContainerKeydown)}},{key:"_initRequests",value:function(){var t=this;this.options.utilsScript&&!window.intlTelInputUtils?window.intlTelInputGlobals.documentReady()?window.intlTelInputGlobals.loadUtils(this.options.utilsScript):window.addEventListener("load",function(){window.intlTelInputGlobals.loadUtils(t.options.utilsScript)}):this.resolveUtilsScriptPromise(),"auto"===this.options.initialCountry?this._loadAutoCountry():this.resolveAutoCountryPromise()}},{key:"_loadAutoCountry",value:function(){window.intlTelInputGlobals.autoCountry?this.handleAutoCountry():window.intlTelInputGlobals.startedLoadingAutoCountry||(window.intlTelInputGlobals.startedLoadingAutoCountry=!0,"function"==typeof this.options.geoIpLookup&&this.options.geoIpLookup(function(t){window.intlTelInputGlobals.autoCountry=t.toLowerCase(),setTimeout(function(){return l("handleAutoCountry")})},function(){return l("rejectAutoCountryPromise")}))}},{key:"_initKeyListeners",value:function(){var t=this;this._handleKeyupEvent=function(){t._updateFlagFromNumber(t.telInput.value)&&t._triggerCountryChange()},this.telInput.addEventListener("keyup",this._handleKeyupEvent),this._handleClipboardEvent=function(){setTimeout(t._handleKeyupEvent)},this.telInput.addEventListener("cut",this._handleClipboardEvent),this.telInput.addEventListener("paste",this._handleClipboardEvent)}},{key:"_cap",value:function(t){var e=this.telInput.getAttribute("maxlength");return e&&t.length>e?t.substr(0,e):t}},{key:"_initBlurListeners",value:function(){var t=this;this._handleSubmitOrBlurEvent=function(){t._removeEmptyDialCode()},this.telInput.form&&this.telInput.form.addEventListener("submit",this._handleSubmitOrBlurEvent),this.telInput.addEventListener("blur",this._handleSubmitOrBlurEvent)}},{key:"_removeEmptyDialCode",value:function(){var t;"+"!==this.telInput.value.charAt(0)||(t=this._getNumeric(this.telInput.value))&&this.selectedCountryData.dialCode!==t||(this.telInput.value="")}},{key:"_getNumeric",value:function(t){return t.replace(/\D/g,"")}},{key:"_trigger",value:function(t){var e=document.createEvent("Event");e.initEvent(t,!0,!0),this.telInput.dispatchEvent(e)}},{key:"_showDropdown",value:function(){this.countryList.classList.remove("iti__hide"),this.selectedFlag.setAttribute("aria-expanded","true"),this._setDropdownPosition(),this.activeItem&&(this._highlightListItem(this.activeItem,!1),this._scrollTo(this.activeItem,!0)),this._bindDropdownListeners(),this.dropdownArrow.classList.add("iti__arrow--up"),this._trigger("open:countrydropdown")}},{key:"_toggleClass",value:function(t,e,i){i&&!t.classList.contains(e)?t.classList.add(e):!i&&t.classList.contains(e)&&t.classList.remove(e)}},{key:"_setDropdownPosition",value:function(){var t,e,i,n,o,a=this;this.options.dropdownContainer&&this.options.dropdownContainer.appendChild(this.dropdown),this.isMobile||(t=this.telInput.getBoundingClientRect(),n=window.pageYOffset||document.documentElement.scrollTop,e=t.top+n,o=this.countryList.offsetHeight,i=e+this.telInput.offsetHeight+o<n+window.innerHeight,n=n<e-o,this._toggleClass(this.countryList,"iti__country-list--dropup",!i&&n),this.options.dropdownContainer&&(o=!i&&n?0:this.telInput.offsetHeight,this.dropdown.style.top="".concat(e+o,"px"),this.dropdown.style.left="".concat(t.left+document.body.scrollLeft,"px"),this._handleWindowScroll=function(){return a._closeDropdown()},window.addEventListener("scroll",this._handleWindowScroll)))}},{key:"_getClosestListItem",value:function(t){for(var e=t;e&&e!==this.countryList&&!e.classList.contains("iti__country");)e=e.parentNode;return e===this.countryList?null:e}},{key:"_bindDropdownListeners",value:function(){var e=this,t=(this._handleMouseoverCountryList=function(t){t=e._getClosestListItem(t.target);t&&e._highlightListItem(t,!1)},this.countryList.addEventListener("mouseover",this._handleMouseoverCountryList),this._handleClickCountryList=function(t){t=e._getClosestListItem(t.target);t&&e._selectListItem(t)},this.countryList.addEventListener("click",this._handleClickCountryList),!0),i=(this._handleClickOffToClose=function(){t||e._closeDropdown(),t=!1},document.documentElement.addEventListener("click",this._handleClickOffToClose),""),n=null;this._handleKeydownOnDropdown=function(t){t.preventDefault(),"ArrowUp"===t.key||"Up"===t.key||"ArrowDown"===t.key||"Down"===t.key?e._handleUpDownKey(t.key):"Enter"===t.key?e._handleEnterKey():"Escape"===t.key?e._closeDropdown():/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(t.key)&&(n&&clearTimeout(n),i+=t.key.toLowerCase(),e._searchForCountry(i),n=setTimeout(function(){i=""},1e3))},document.addEventListener("keydown",this._handleKeydownOnDropdown)}},{key:"_handleUpDownKey",value:function(t){var e="ArrowUp"===t||"Up"===t?this.highlightedItem.previousElementSibling:this.highlightedItem.nextElementSibling;e&&(e.classList.contains("iti__divider")&&(e="ArrowUp"===t||"Up"===t?e.previousElementSibling:e.nextElementSibling),this._highlightListItem(e,!0))}},{key:"_handleEnterKey",value:function(){this.highlightedItem&&this._selectListItem(this.highlightedItem)}},{key:"_searchForCountry",value:function(t){for(var e=0;e<this.countries.length;e++)if(this._startsWith(this.countries[e].name,t)){var i=this.countryList.querySelector("#iti-".concat(this.id,"__item-").concat(this.countries[e].iso2));this._highlightListItem(i,!1),this._scrollTo(i,!0);break}}},{key:"_startsWith",value:function(t,e){return t.substr(0,e.length).toLowerCase()===e}},{key:"_updateValFromNumber",value:function(t){var e,i,n;this.options.formatOnDisplay&&window.intlTelInputUtils&&this.selectedCountryData&&(e=!this.options.separateDialCode&&(this.options.nationalMode||"+"!==t.charAt(0)),i=(n=intlTelInputUtils.numberFormat).NATIONAL,n=n.INTERNATIONAL,t=intlTelInputUtils.formatNumber(t,this.selectedCountryData.iso2,e?i:n)),t=this._beforeSetNumber(t),this.telInput.value=t}},{key:"_updateFlagFromNumber",value:function(t){var e=this.selectedCountryData.dialCode,i=(t&&this.options.nationalMode&&"1"===e&&"+"!==t.charAt(0)&&("1"!==t.charAt(0)&&(t="1".concat(t)),t="+".concat(t)),this.options.separateDialCode&&e&&"+"!==t.charAt(0)&&(t="+".concat(e).concat(t)),this._getDialCode(t,!0)),n=this._getNumeric(t),o=null;if(i){var a=this.countryCodes[this._getNumeric(i)],i=-1!==a.indexOf(this.selectedCountryData.iso2)&&n.length<=i.length-1;if(!("1"===e&&this._isRegionlessNanp(n))&&!i)for(var s=0;s<a.length;s++)if(a[s]){o=a[s];break}}else"+"===t.charAt(0)&&n.length?o="":t&&"+"!==t||(o=this.defaultCountry);return null!==o&&this._setFlag(o)}},{key:"_isRegionlessNanp",value:function(t){var t=this._getNumeric(t);return"1"===t.charAt(0)&&(t=t.substr(1,3),-1!==c.indexOf(t))}},{key:"_highlightListItem",value:function(t,e){var i=this.highlightedItem;i&&i.classList.remove("iti__highlight"),this.highlightedItem=t,this.highlightedItem.classList.add("iti__highlight"),e&&this.highlightedItem.focus()}},{key:"_getCountryData",value:function(t,e,i){for(var n=e?s:this.countries,o=0;o<n.length;o++)if(n[o].iso2===t)return n[o];if(i)return null;throw new Error("No country data for '".concat(t,"'"))}},{key:"_setFlag",value:function(t){var e=this.selectedCountryData.iso2?this.selectedCountryData:{},i=(this.selectedCountryData=t?this._getCountryData(t,!1,!1):{},this.selectedCountryData.iso2&&(this.defaultCountry=this.selectedCountryData.iso2),this.selectedFlagInner.setAttribute("class","iti__flag iti__".concat(t)),t?"".concat(this.selectedCountryData.name,": +").concat(this.selectedCountryData.dialCode):"Unknown");return this.selectedFlag.setAttribute("title",i),this.options.separateDialCode&&(i=this.selectedCountryData.dialCode?"+".concat(this.selectedCountryData.dialCode):"",this.selectedDialCode.innerHTML=i,i=this.selectedFlag.offsetWidth||this._getHiddenSelectedFlagWidth(),this.telInput.style.paddingLeft="".concat(i+16,"px")),this._updatePlaceholder(),this.options.allowDropdown&&((i=this.activeItem)&&(i.classList.remove("iti__active"),i.setAttribute("aria-selected","false")),t)&&((i=this.countryList.querySelector("#iti-".concat(this.id,"__item-").concat(t,"-preferred"))||this.countryList.querySelector("#iti-".concat(this.id,"__item-").concat(t))).setAttribute("aria-selected","true"),i.classList.add("iti__active"),this.activeItem=i,this.selectedFlag.setAttribute("aria-activedescendant",i.getAttribute("id"))),e.iso2!==t}},{key:"_getHiddenSelectedFlagWidth",value:function(){var t=this.telInput.parentNode.cloneNode(),e=(t.style.visibility="hidden",document.body.appendChild(t),this.flagsContainer.cloneNode()),i=(t.appendChild(e),this.selectedFlag.cloneNode(!0)),e=(e.appendChild(i),i.offsetWidth);return t.parentNode.removeChild(t),e}},{key:"_updatePlaceholder",value:function(){var t="aggressive"===this.options.autoPlaceholder||!this.hadInitialPlaceholder&&"polite"===this.options.autoPlaceholder;window.intlTelInputUtils&&t&&(t=intlTelInputUtils.numberType[this.options.placeholderNumberType],t=this.selectedCountryData.iso2?intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2,this.options.nationalMode,t):"",t=this._beforeSetNumber(t),"function"==typeof this.options.customPlaceholder&&(t=this.options.customPlaceholder(t,this.selectedCountryData)),this.telInput.setAttribute("placeholder",t))}},{key:"_selectListItem",value:function(t){var e=this._setFlag(t.getAttribute("data-country-code")),t=(this._closeDropdown(),this._updateDialCode(t.getAttribute("data-dial-code"),!0),this.telInput.focus(),this.telInput.value.length);this.telInput.setSelectionRange(t,t),e&&this._triggerCountryChange()}},{key:"_closeDropdown",value:function(){this.countryList.classList.add("iti__hide"),this.selectedFlag.setAttribute("aria-expanded","false"),this.dropdownArrow.classList.remove("iti__arrow--up"),document.removeEventListener("keydown",this._handleKeydownOnDropdown),document.documentElement.removeEventListener("click",this._handleClickOffToClose),this.countryList.removeEventListener("mouseover",this._handleMouseoverCountryList),this.countryList.removeEventListener("click",this._handleClickCountryList),this.options.dropdownContainer&&(this.isMobile||window.removeEventListener("scroll",this._handleWindowScroll),this.dropdown.parentNode)&&this.dropdown.parentNode.removeChild(this.dropdown),this._trigger("close:countrydropdown")}},{key:"_scrollTo",value:function(t,e){var i=this.countryList,n=window.pageYOffset||document.documentElement.scrollTop,o=i.offsetHeight,a=i.getBoundingClientRect().top+n,s=a+o,r=t.offsetHeight,t=t.getBoundingClientRect().top+n,n=t+r,l=t-a+i.scrollTop,u=o/2-r/2;t<a?(e&&(l-=u),i.scrollTop=l):s<n&&(e&&(l+=u),i.scrollTop=l-(o-r))}},{key:"_updateDialCode",value:function(t,e){var i=this.telInput.value,t="+".concat(t);if("+"===i.charAt(0))var n=this._getDialCode(i),n=n?i.replace(n,t):t;else{if(this.options.nationalMode||this.options.separateDialCode)return;if(i)n=t+i;else{if(!e&&this.options.autoHideDialCode)return;n=t}}this.telInput.value=n}},{key:"_getDialCode",value:function(t,e){var i="";if("+"===t.charAt(0))for(var n="",o=0;o<t.length;o++){var a=t.charAt(o);if(!isNaN(parseInt(a,10))){if(n+=a,e)this.countryCodes[n]&&(i=t.substr(0,o+1));else if(this.dialCodes[n]){i=t.substr(0,o+1);break}if(n.length===this.countryCodeMaxLen)break}}return i}},{key:"_getFullNumber",value:function(){var t=this.telInput.value.trim(),e=this.selectedCountryData.dialCode,i=this._getNumeric(t),i=this.options.separateDialCode&&"+"!==t.charAt(0)&&e&&i?"+".concat(e):"";return i+t}},{key:"_beforeSetNumber",value:function(t){var e;return this.options.separateDialCode&&this._getDialCode(t)&&(e=" "===t[(e="+".concat(this.selectedCountryData.dialCode)).length]||"-"===t[e.length]?e.length+1:e.length,t=t.substr(e)),this._cap(t)}},{key:"_triggerCountryChange",value:function(){this._trigger("countrychange")}},{key:"handleAutoCountry",value:function(){"auto"===this.options.initialCountry&&(this.defaultCountry=window.intlTelInputGlobals.autoCountry,this.telInput.value||this.setCountry(this.defaultCountry),this.resolveAutoCountryPromise())}},{key:"handleUtils",value:function(){window.intlTelInputUtils&&(this.telInput.value&&this._updateValFromNumber(this.telInput.value),this._updatePlaceholder()),this.resolveUtilsScriptPromise()}},{key:"destroy",value:function(){var t=this.telInput.form,e=(this.options.allowDropdown&&(this._closeDropdown(),this.selectedFlag.removeEventListener("click",this._handleClickSelectedFlag),this.flagsContainer.removeEventListener("keydown",this._handleFlagsContainerKeydown),e=this._getClosestLabel())&&e.removeEventListener("click",this._handleLabelClick),this.hiddenInput&&t&&t.removeEventListener("submit",this._handleHiddenInputSubmit),this.options.autoHideDialCode&&(t&&t.removeEventListener("submit",this._handleSubmitOrBlurEvent),this.telInput.removeEventListener("blur",this._handleSubmitOrBlurEvent)),this.telInput.removeEventListener("keyup",this._handleKeyupEvent),this.telInput.removeEventListener("cut",this._handleClipboardEvent),this.telInput.removeEventListener("paste",this._handleClipboardEvent),this.telInput.removeAttribute("data-intl-tel-input-id"),this.telInput.parentNode);e.parentNode.insertBefore(this.telInput,e),e.parentNode.removeChild(e),delete window.intlTelInputGlobals.instances[this.id]}},{key:"getExtension",value:function(){return window.intlTelInputUtils?intlTelInputUtils.getExtension(this._getFullNumber(),this.selectedCountryData.iso2):""}},{key:"getNumber",value:function(t){var e;return window.intlTelInputUtils?(e=this.selectedCountryData.iso2,intlTelInputUtils.formatNumber(this._getFullNumber(),e,t)):""}},{key:"getNumberType",value:function(){return window.intlTelInputUtils?intlTelInputUtils.getNumberType(this._getFullNumber(),this.selectedCountryData.iso2):-99}},{key:"getSelectedCountryData",value:function(){return this.selectedCountryData}},{key:"getValidationError",value:function(){var t;return window.intlTelInputUtils?(t=this.selectedCountryData.iso2,intlTelInputUtils.getValidationError(this._getFullNumber(),t)):-99}},{key:"isValidNumber",value:function(){var t=this._getFullNumber().trim(),e=this.options.nationalMode?this.selectedCountryData.iso2:"";return window.intlTelInputUtils?intlTelInputUtils.isValidNumber(t,e):null}},{key:"setCountry",value:function(t){t=t.toLowerCase();this.selectedFlagInner.classList.contains("iti__".concat(t))||(this._setFlag(t),this._updateDialCode(this.selectedCountryData.dialCode,!1),this._triggerCountryChange())}},{key:"setNumber",value:function(t){var e=this._updateFlagFromNumber(t);this._updateValFromNumber(t),e&&this._triggerCountryChange()}},{key:"setPlaceholderNumberType",value:function(t){this.options.placeholderNumberType=t,this._updatePlaceholder()}}])&&n(t.prototype,e),i&&n(t,i),o}();return i.getCountryData=function(){return s},i.loadUtils=function(i){if(!window.intlTelInputUtils&&!window.intlTelInputGlobals.startedLoadingUtilsScript){if(window.intlTelInputGlobals.startedLoadingUtilsScript=!0,"undefined"!=typeof Promise)return new Promise(function(t,e){return o(i,t,e)});o(i)}return null},i.defaults=d,i.version="17.0.12",function(t,e){e=new h(t,e);return e._init(),t.setAttribute("data-intl-tel-input-id",e.id),window.intlTelInputGlobals.instances[e.id]=e}});const nameLocalStorage="Language";let defaultLocale="en",locale="",translations={},languages=["en","es"],languagesObj={en:{en:"English",es:"Inglés"},es:{en:"Spanish",es:"Español"}};const currentLanguage=localStorage.getItem(nameLocalStorage)&&languages.includes(localStorage.getItem(nameLocalStorage))?localStorage.getItem(nameLocalStorage):defaultLocale,sBtn_text=document.querySelector(".sBtn-text");function bindLocaleSwitcher(t){const e=document.querySelector(".select-menu"),i=e.querySelector(".select-btn"),n=e.querySelectorAll(".option");i.addEventListener("click",()=>e.classList.toggle("active")),n.forEach(t=>{t.addEventListener("click",()=>{defaultLocale=t.querySelector(".option-text").id.toLocaleLowerCase(),sBtn_text.innerText=languagesObj[defaultLocale][defaultLocale],document.getElementById("flagImg").src=t.querySelector(".option-img").src,setLocale(defaultLocale),changeDocument(defaultLocale),e.classList.remove("active")})})}function changeDocument(t){$("#load__document__TermsAndConditions[href]").each(function(){this.href="docs/TermsAndConditions"+t.toUpperCase()+".pdf"}),$("#load__document__PrivacyPolicy[href]").each(function(){this.href="docs/PrivacyPolicy"+t.toUpperCase()+".pdf"})}async function setLocale(t){var e;localStorage.setItem(nameLocalStorage,t),t!==locale&&(e=await fetchTranslationsFor(t),locale=t,translations=e,translatePage())}async function fetchTranslationsFor(t){return(await fetch(`./lang/${t}.json`)).json()}function translatePage(){document.querySelectorAll("[data-i18n-key]").forEach(translateElement)}function translateElement(t){var e=t.getAttribute("data-i18n-key"),e=translations[e];t.innerText=e}document.addEventListener("DOMContentLoaded",()=>{sBtn_text.innerText=languagesObj[currentLanguage][currentLanguage],document.getElementById("flagImg").src=document.getElementById(currentLanguage).src,setLocale(currentLanguage),bindLocaleSwitcher(currentLanguage),changeDocument(currentLanguage)}),AOS.init(),setTimeout(()=>{AOS.refresh()},500);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
